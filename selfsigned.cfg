#
# Use this to generate self-signed cert
# openssl req -config cert.conf -new -x509 -sha256 -newkey rsa:2048 -nodes -keyout pippo.key.pem -days 365 -out pippo.cert.pem
# 
[ req ]
default_bits        = 2048
default_keyfile     = keyfile.pem
distinguished_name  = req_distinguished_name
req_extensions      = req_ext
x509_extensions     = x509_ext
string_mask         = utf8only
prompt              = no

# The Subject DN can be formed using X501 or RFC 4514 (see RFC 4519 for a description).
#   Its sort of a mashup. For example, RFC 4514 does not provide emailAddress.
[ req_distinguished_name ]
countryName         = CH
stateOrProvinceName = VD
localityName        = Lausanne
organizationName    = EPFL
commonName          = Giovanni Cangiani - EPFL
emailAddress        = giovanni.cangiani@epfl.ch

# Section x509_ext is used when generating a self-signed certificate. I.e., openssl req -x509 ...
[ x509_ext ]

subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid,issuer

# You only need digitalSignature below. *If* you don't allow
#   RSA Key transport (i.e., you use ephemeral cipher suites), then
#   omit keyEncipherment because that's key transport.
basicConstraints = CA:FALSE
keyUsage         = digitalSignature, keyEncipherment
nsComment        = "OpenSSL Generated Certificate"
# subjectAltName   = @alternate_names

# Section req_ext is used when generating a certificate signing request. I.e., openssl req ...
[ req_ext ]
subjectKeyIdentifier = hash
basicConstraints     = CA:FALSE
keyUsage             = digitalSignature, keyEncipherment
# subjectAltName       = @alternate_names
nsComment            = "OpenSSL Generated Certificate"

# [ alternate_names ]
# DNS.1 = idevelopsrv24.epfl.ch
# DNS.2 = idev-fsd-redmine.epfl.ch

